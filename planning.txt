Goal: Two-player command-line tic-tac-toe.

PSEUDOCODE:
Display Introductory message.
Ask Player1 and Player2 their names
Initialize score to 0 - 0
Display player names, score and board.
While playing:
    Players take turns.
        In the first game, Player 1 has X and Player 2 has O.
        X starts, then alternate turns.
    Each turn:
        Player indicates a square to place their piece on using CLI.
        Check if a win condition is reached:
            3 of the same piece in a row
                Vertically (3 rows) or
                Horizontally (3 rows) or
                Diagonally (2 diagonals)
        If a player has won
            Victory message
            Increment score for winning player.
            If play again?
                Swap which player has X and which has O.
                Play another game.
            If not?
                Display final results and victory message.
                Exit.
        If it is not reached
            Next player's turn


Board (state)
        9 squares (3 X 3)
        Two different types of pieces - X and O.
        Each board square can be blank, X or O.
        Board has an index method similar to chess.
            Lower case letter for column, number for row.
            Index view
            +--+--+--+
            |a3|b3|c3|
            +--+--+--+
            |a2|b2|c2|
            +--+--+--+
            |a1|b1|c1|
            +--+--+--+

            Array view
            +--+--+--+
            | 0| 1| 2|
            +--+--+--+
            | 3| 4| 5|
            +--+--+--+
            | 6| 7| 8|
            +--+--+--+

Win conditions:
    Rows
    0 == 1 == 2
    3 == 4 == 5
    6 == 7 == 8
    
    Columns    
    0 == 3 == 6
    1 == 4 == 7
    2 == 5 == 8

    Diagonals
    0 == 4 == 8
    2 == 4 == 6

Board array:
    Blank / X / O:  - ' ', 'X', 'O'

    Board below would be:
    ['X', 'O', 'O', ' ', 'X', ' ', 'X', ' ', 'O']

Enter move:
    Use e.g. a1, c3, etc.

Display:

-------------------
Player 1 - X    0           (ScoreBoard)
>> Harrison <<

Player 2 - O    0
   Jacob

Tied games      0

    +---+---+---+           (GameBoard)
  3 | X | O | O |
    +---+---+---+
  2 |   | X |   |
    +---+---+---+
  1 | X |   | O |
    +---+---+---+
      a   b   c

Harrison >> a2               (Player)
-------------------

Objects and Methods

Player
- Take turns
@name
@my_turn
@x_or_o
def take_turn

ScoreBoard
- Remember and display the score
@player1_score
@player2_score
@tie
def score_round
def display

GameBoard
- Remember and display the game state
@game_board
def display

Referee
- Introduce the game
- Check for win condition or tie
- Announce result
def introduce_game
def ask_names
def game_over
def announce_result

--- This changed significantly throughout implementation ---

Reading the Rosetta code solution:

Structure:
module TicTacToe
    class Game
        def initialize
            Holds the board, current player id and the 2 players as an array.
        def play
        def free_positions
        def place_player_marker
        def player_has_won?
        def board_full?
        def other_player_id
        def switch_players!
        def current_player
        def opponent
        def turn_num
        def print_board
    
    class Player
    
    class HumanPlayer < Player
        def select_position!
        def to_s
    
    class ComputerPlayer < Player
        def group_positions_by_markers
        def select_position
        def look_for_winning_or_blocking_position
        def corner_trap_defense_needed?
        def corner_trap_defense_position
        def random_prioritized_position
        def log_debug
        def to_s